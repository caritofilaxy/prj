--------------------------------------------------------------------------------
--     REVISION:  $Id: ss.sqlite 214 2013-02-28 10:33:18Z xdr.box@gmail.com $
--  DESCRIPTION:  Application DB schema (SQLite)
--       AUTHOR:  Alexander Simakov <xdr [dot] box [at] gmail [dot] com>
--------------------------------------------------------------------------------

BEGIN TRANSACTION;

PRAGMA foreign_keys = ON;

--
-- Authentication/Authorization (Catalyst SimpleDB's compatible)
--

CREATE TABLE users (
    id              INTEGER PRIMARY KEY,
    username        TEXT UNIQUE NOT NULL,
    password        TEXT NOT NULL,
    email           TEXT NOT NULL
);

CREATE TABLE roles (
    id              INTEGER PRIMARY KEY,
    role            TEXT UNIQUE NOT NULL
);

CREATE TABLE user_roles (
    user_id         INTEGER NOT NULL,
    role_id         INTEGER NOT NULL,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE ON UPDATE CASCADE
);

--
-- Dictionaries & languages
--

CREATE TABLE dictionaries (
    id                  INTEGER PRIMARY KEY,
    lang_id             INTEGER NOT NULL,
    type_id             INTEGER NOT NULL,
    url                 TEXT NOT NULL,
    description         TEXT,
    hidden              INTEGER NOT NULL DEFAULT 0,
    priority            INTEGER NOT NULL DEFAULT 0,
    checked_by_default  INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (lang_id) REFERENCES languages(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (type_id) REFERENCES dictionary_types(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE languages (
    id              INTEGER PRIMARY KEY,
    code            TEXT UNIQUE NOT NULL,
    name            TEXT UNIQUE NOT NULL
);

INSERT INTO languages (id, code, name) VALUES (1, 'en', 'English');

CREATE TABLE dictionary_types (
    id              INTEGER PRIMARY KEY,
    type            TEXT NOT NULL
);

INSERT INTO dictionary_types (id, type) VALUES (1, 'Грамматический');
INSERT INTO dictionary_types (id, type) VALUES (2, 'Толковый');

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    1, -- grammatical
    1, -- priority
    1, -- checked_by_default
    'http://dict.rambler.ru/?coll=4.0er&query=%w',
    'Rambler'
);

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    1, -- grammatical
    2, -- priority
    1, -- checked_by_default
    'http://lingvopro.abbyyonline.com/ru/Translate/en-ru/%w',
    'ABBYY Lingvo.Pro'
);

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    1, -- grammatical
    3, -- priority
    0, -- checked_by_default
    'http://www.multitran.ru/c/m.exe?l1=1&l2=2&s=%w',
    'Multitran.RU'
);

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    2, -- explanatory
    4, -- priority
    1, -- checked_by_default
    'http://www.ldoceonline.com/search/?q=%w',
    'Longman English Dictionary'
);

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    2, -- explanatory
    5, -- priority
    1, -- checked_by_default
    'http://www.merriam-webster.com/dictionary/%w',
    'Merriam-Webster English Dictionary'
);

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    2, -- explanatory
    6, -- priority
    0, -- checked_by_default
    'http://www.thefreedictionary.com/%w',
    'The Free Dictionary by Farlex'
);

INSERT INTO dictionaries (lang_id, type_id, priority, checked_by_default, url, description) VALUES (
    1, -- en
    2, -- explanatory
    7, -- priority
    0, -- checked_by_default
    'http://vipdictionary.com/search/search/?search=%w',
    'VipDictionary - English dictionary with pictures'
);

--
-- User preferences
--

CREATE TABLE user_checked_by_default_dictionaries (
    id                  INTEGER PRIMARY KEY,
    user_id             INTEGER NOT NULL,
    dict_id             INTEGER NOT NULL,
    checked_by_default  INTEGER NOT NULL,
    UNIQUE (user_id, dict_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (dict_id) REFERENCES dictionaries(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE user_default_dictionaries (
    id                  INTEGER PRIMARY KEY,
    user_id             INTEGER NOT NULL,
    lang_id             INTEGER NOT NULL,
    dict_id             INTEGER NOT NULL,
    UNIQUE (user_id, lang_id, dict_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (lang_id) REFERENCES languages(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (dict_id) REFERENCES dictionaries(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE user_lesson_limits (
    id                  INTEGER PRIMARY KEY,
    user_id             INTEGER NOT NULL,
    lang_id             INTEGER NOT NULL,
    lesson_limit        INTEGER NOT NULL DEFAULT 100,
    UNIQUE (user_id, lang_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (lang_id) REFERENCES languages(id) ON DELETE CASCADE ON UPDATE CASCADE
);

--
-- Extra stop-words
--

CREATE TABLE extra_stop_words (
    id                  INTEGER PRIMARY KEY,
    lang_id             INTEGER NOT NULL,
    word                TEXT NOT NULL,
    UNIQUE (lang_id, word),
    FOREIGN KEY (lang_id) REFERENCES languages(id) ON DELETE CASCADE ON UPDATE CASCADE
);

--
-- Known words (i.e. words learned by user)
--

CREATE TABLE known_words (
    id                  INTEGER PRIMARY KEY,
    user_id             INTEGER NOT NULL,
    lang_id             INTEGER NOT NULL,
    word                TEXT NOT NULL,
    UNIQUE (user_id, lang_id, word),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (lang_id) REFERENCES languages(id) ON DELETE CASCADE ON UPDATE CASCADE
);

COMMIT;
